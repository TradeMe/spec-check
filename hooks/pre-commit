#!/usr/bin/env bash
#
# Git pre-commit hook that runs all CI checks
# This ensures code quality before commits are created
#
# This hook is installed automatically by the Claude Code session-start hook
# To bypass this hook (not recommended), use: git commit --no-verify
#

set -e

echo "🔍 Running pre-commit checks..."
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored status messages
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# Check if uv is available
if ! command -v uv &> /dev/null; then
    print_error "uv is not installed. Please install uv: https://docs.astral.sh/uv/"
    exit 1
fi

# Track overall status
FAILED=0

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📋 Code Quality Checks"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Run ruff check
echo "🔎 Running ruff check..."
if uv run ruff check spec_tools/ tests/; then
    print_status "Ruff check passed"
else
    print_error "Ruff check failed"
    FAILED=1
fi
echo ""

# Run ruff format check
echo "🎨 Running ruff format check..."
if uv run ruff format --check spec_tools/ tests/; then
    print_status "Ruff format check passed"
else
    print_error "Ruff format check failed"
    print_warning "Run 'uv run ruff format spec_tools/ tests/' to fix formatting"
    FAILED=1
fi
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📚 Spec-Tools Validation"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Run file allowlist validation
echo "📝 Validating file allowlist..."
if uv run spec-tools lint --verbose; then
    print_status "File allowlist validation passed"
else
    print_error "File allowlist validation failed"
    FAILED=1
fi
echo ""

# Run spec-test structure validation
echo "🏗️  Validating spec-test structure..."
if uv run spec-tools check-structure; then
    print_status "Spec-test structure validation passed"
else
    print_error "Spec-test structure validation failed"
    FAILED=1
fi
echo ""

# Run spec coverage validation
echo "📊 Validating spec coverage..."
if uv run spec-tools check-coverage; then
    print_status "Spec coverage validation passed"
else
    print_error "Spec coverage validation failed"
    FAILED=1
fi
echo ""

# Run spec schema validation
echo "📐 Validating spec schema..."
if uv run spec-tools check-schema --verbose; then
    print_status "Spec schema validation passed"
else
    print_error "Spec schema validation failed"
    FAILED=1
fi
echo ""

# Run spec unique IDs validation
echo "🔑 Validating unique spec IDs..."
if uv run spec-tools check-unique-specs; then
    print_status "Unique spec IDs validation passed"
else
    print_error "Unique spec IDs validation failed"
    FAILED=1
fi
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🧪 Running Tests"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Run tests with coverage
echo "🧪 Running pytest with coverage..."
if uv run pytest -v --cov --cov-report=term-missing --cov-fail-under=45; then
    print_status "All tests passed"
else
    print_error "Tests failed"
    FAILED=1
fi
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Exit with appropriate status
if [ $FAILED -eq 1 ]; then
    echo ""
    print_error "Pre-commit checks failed!"
    print_warning "Fix the issues above before committing"
    print_warning "To bypass this hook (not recommended): git commit --no-verify"
    echo ""
    exit 1
else
    echo ""
    print_status "All pre-commit checks passed! ✨"
    echo ""
    exit 0
fi
