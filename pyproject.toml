[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "spec_check"

[project]
name = "spec-check"
version = "0.1.4"
description = "Tools for spec-driven development - validate specifications, test coverage, file structure, and documentation links"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "spec-check contributors"}
]
keywords = [
    "spec",
    "specification",
    "testing",
    "validation",
    "linting",
    "documentation",
    "traceability",
    "requirements",
    "test-coverage",
    "markdown",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Documentation",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed",
]
dependencies = [
    "markdown-it-py>=4.0.0",
    "pathspec>=0.11.0",
    "pydantic>=2.0",
    "pyyaml>=6.0.3",
    "tomli>=2.0.0; python_version < '3.11'",
]

[project.urls]
Homepage = "https://github.com/TradeMe/spec-check"
Repository = "https://github.com/TradeMe/spec-check"
Issues = "https://github.com/TradeMe/spec-check/issues"
Changelog = "https://github.com/TradeMe/spec-check/releases"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "flit>=3.12.0",
]

[project.scripts]
spec-check = "spec_check.cli:main"
spec-tools = "spec_check.cli:main"
spec-lint = "spec_check.cli:main"

# Ruff linter configuration
[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["spec_check"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "req: marks tests as linked to specific requirements (e.g., @pytest.mark.req('REQ-001'))"
]

# Coverage configuration
[tool.coverage.run]
source = ["spec_check"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
fail_under = 65
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# spec-check configuration (dogfooding our own tool!)
[tool.spec-check.lint]
allowlist = ".specallowlist"
use_gitignore = true

[tool.spec-check.check-coverage]
min_coverage = 49.0

[tool.spec-check.check-schema]
use_gitignore = true
