name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0, 1.0.0-alpha.1)'
        required: true
        type: string

jobs:
  prepare:
    name: Prepare release PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        VERSION="${{ inputs.version }}"

        # Check if version follows semantic versioning
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$'; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must follow semantic versioning: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease"
          exit 1
        fi

        echo "✅ Version format is valid: $VERSION"

    - name: Check if version already exists
      run: |
        VERSION="${{ inputs.version }}"

        if git tag | grep -q "^v$VERSION$"; then
          echo "❌ Version v$VERSION already exists as a tag"
          exit 1
        fi

        echo "✅ Version v$VERSION does not exist yet"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ inputs.version }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        echo "✅ Updated version to $VERSION in pyproject.toml"

    - name: Update CHANGELOG.md
      run: |
        VERSION="${{ inputs.version }}"
        DATE=$(date +%Y-%m-%d)

        # Create a temporary file with the updated changelog
        {
          # Keep everything up to [Unreleased] section
          sed -n '1,/^## \[Unreleased\]/p' CHANGELOG.md

          # Add the new release section
          echo ""
          echo "## [$VERSION] - $DATE"
          echo ""

          # Extract content from Unreleased section (between [Unreleased] and next ##)
          sed -n '/^## \[Unreleased\]/,/^## \[/p' CHANGELOG.md | sed '1d;$d' | sed '/^$/d'

          echo ""

          # Add the rest of the changelog (from first version onwards)
          sed -n '/^## \[[0-9]/,$p' CHANGELOG.md

          # Update the link references at the bottom
          echo ""
          PREV_VERSION=$(sed -n 's/^## \[\([0-9][^]]*\)\].*/\1/p' CHANGELOG.md | head -2 | tail -1)
          echo "[Unreleased]: https://github.com/TradeMe/spec-check/compare/v$VERSION...HEAD"
          echo "[$VERSION]: https://github.com/TradeMe/spec-check/compare/v$PREV_VERSION...v$VERSION"
          sed -n '/^\[[0-9]/p' CHANGELOG.md | grep -v "^\[Unreleased\]" | grep -v "^\[$VERSION\]"
        } > CHANGELOG.md.tmp

        mv CHANGELOG.md.tmp CHANGELOG.md
        echo "✅ Updated CHANGELOG.md with version $VERSION"

    - name: Create release branch
      run: |
        VERSION="${{ inputs.version }}"
        BRANCH="release/v$VERSION"

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git checkout -b "$BRANCH"
        git add pyproject.toml CHANGELOG.md
        git commit -m "chore: Prepare release v$VERSION

        - Update version to $VERSION in pyproject.toml
        - Update CHANGELOG.md with release date

        🤖 Generated by GitHub Actions"

        git push origin "$BRANCH"

        echo "branch=$BRANCH" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ inputs.version }}';
          const branch = `release/v${version}`;

          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Release v${version}`,
            head: branch,
            base: 'main',
            body: `# Release v${version}

          This PR prepares the release of version ${version}.

          ## Checklist

          - [x] Version updated in \`pyproject.toml\`
          - [x] \`CHANGELOG.md\` updated with release date
          - [ ] All tests passing (verified by CI)
          - [ ] Ready to merge

          ## After Merge

          1. This PR will automatically trigger TestPyPI publishing
          2. Create a GitHub release with tag \`v${version}\`
          3. The release will automatically trigger PyPI publishing

          ## Release Notes

          See [CHANGELOG.md](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${branch}/CHANGELOG.md) for details.
          `
          });

          // Add the 'release' label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['release']
          });

          console.log(`✅ Created PR #${pr.number}: ${pr.html_url}`);
          core.summary.addRaw(`## Release PR Created

          PR #${pr.number}: ${pr.html_url}

          **Version:** ${version}
          **Branch:** ${branch}

          The PR has been labeled with "release" to allow version changes.
          `);
          await core.summary.write();
