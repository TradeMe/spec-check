name: Version Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'pyproject.toml'

jobs:
  check-version:
    name: Check version changes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get base version
      id: base-version
      run: |
        git fetch origin ${{ github.base_ref }}
        BASE_VERSION=$(git show origin/${{ github.base_ref }}:pyproject.toml | grep '^version = ' | sed 's/version = "\(.*\)"/\1/')
        echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
        echo "Base version: $BASE_VERSION"

    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Check if version changed
      id: version-changed
      run: |
        if [ "${{ steps.base-version.outputs.version }}" != "${{ steps.current-version.outputs.version }}" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Version changed from ${{ steps.base-version.outputs.version }} to ${{ steps.current-version.outputs.version }}"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version unchanged"
        fi

    - name: Check PR labels
      if: steps.version-changed.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const labels = context.payload.pull_request.labels.map(l => l.name);
          const hasReleaseLabel = labels.includes('release');

          if (!hasReleaseLabel) {
            core.setFailed(
              '❌ Version change detected without "release" label.\n\n' +
              'Version changes must go through the release process:\n' +
              '1. Use the "Prepare Release" workflow to create a release PR\n' +
              '2. The workflow will automatically update version and changelog\n' +
              '3. Release PRs are automatically labeled with "release"\n\n' +
              'If this is a release PR, add the "release" label to proceed.'
            );
          } else {
            console.log('✅ Release label found - version change is allowed');
          }

    - name: Validate version format
      if: steps.version-changed.outputs.changed == 'true'
      run: |
        VERSION="${{ steps.current-version.outputs.version }}"

        # Check if version follows semantic versioning
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$'; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must follow semantic versioning: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease"
          exit 1
        fi

        echo "✅ Version format is valid: $VERSION"

    - name: Check changelog updated
      if: steps.version-changed.outputs.changed == 'true'
      run: |
        if ! git diff origin/${{ github.base_ref }} CHANGELOG.md | grep -q "^+"; then
          echo "❌ CHANGELOG.md was not updated"
          echo "When releasing a new version, CHANGELOG.md must be updated"
          exit 1
        fi

        echo "✅ CHANGELOG.md was updated"
