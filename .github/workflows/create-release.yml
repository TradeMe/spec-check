name: Create Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  create-release:
    name: Create GitHub Release
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Extract release notes from CHANGELOG
      id: notes
      run: |
        # Extract the content between the first version header and the next version header
        NOTES=$(awk '/^## \[[0-9]/ {if (found) exit; found=1; next} found && /^## \[/ {exit} found {print}' CHANGELOG.md)

        # Save to file to preserve formatting
        echo "$NOTES" > release_notes.md

        # Also output for debugging
        echo "Release notes:"
        cat release_notes.md

    - name: Check if release already exists
      id: check
      run: |
        if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.version.outputs.version }}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} does not exist yet"
        fi

    - name: Create GitHub Release
      if: steps.check.outputs.exists == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.version.outputs.version }}';
          const notes = fs.readFileSync('release_notes.md', 'utf8');

          // Determine if this is a pre-release
          const isPrerelease = version.includes('-alpha') ||
                               version.includes('-beta') ||
                               version.includes('-rc');

          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `v${version}`,
            body: notes.trim(),
            draft: false,
            prerelease: isPrerelease,
            target_commitish: 'main'
          });

          console.log(`âœ… Created release: ${release.data.html_url}`);

          core.summary.addRaw(`## Release Created

          **Version:** ${version}
          **Release:** ${release.data.html_url}
          **Pre-release:** ${isPrerelease}

          The release has been created and will automatically trigger PyPI publishing.
          `);
          await core.summary.write();

    - name: Comment on PR
      if: steps.check.outputs.exists == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const message = `ðŸŽ‰ Release [v${version}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version}) has been created!

          The package is now being published to PyPI. Check the [Publish workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/publish.yml) for progress.`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: message
          });
